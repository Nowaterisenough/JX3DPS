name: Build and Release

on:
  push:
    branches:
      - '**'  # 匹配所有分支
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, review_requested]
    branches:
      - master
  workflow_dispatch:

jobs:
  build-win:
    name: Build Windows MinGW
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw
            qt_ver: 6.7.2
            gcc_version: 13.2.0
    env:
      targetName: JX3DPS.dll
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      packageName: ${{ steps.package.outputs.packageName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install GCC
        shell: pwsh
        run: |
          .\.github\scripts\install-gcc.ps1 -Version ${{ matrix.gcc_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'false'

      - name: Qt and MinGW environment configuration
        shell: pwsh
        run: |
          $QtBin = "${{ env.Qt6_DIR }}/bin"
          echo "$QtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        id: build
        shell: bash
        run: |
          export PATH="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:$PATH"
          cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
          cmake --build ./build --target install --config Release

      - name: Get version from CMake
        id: get_version
        shell: bash
        run: |
          export TZ="Asia/Shanghai"
          timestamp=$(TZ="Asia/Shanghai" git log -1 --format=%cd --date=format:%Y%m%d%H%M)
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release > cmake_output.txt
          version=$(sed -n 's/.*VERSION=\(.*\)/\1/p' cmake_output.txt | head -n 1)
          if [ -z "$version" ]; then
            echo "无法从 CMake 输出中提取版本号"
            exit 1
          fi
          major_minor_version=$(echo $version | cut -d. -f1,2)
          full_version="${major_minor_version}.${timestamp:4:4}.${timestamp:8:4}"
          echo "生成的版本号: $full_version"
          echo "VERSION=$full_version" >> $GITHUB_OUTPUT

      - name: Package
        id: package      
        env:
          archiveName: JX3DPS-win-${{ steps.get_version.outputs.VERSION }}
        shell: pwsh
        run: |
          & .github\scripts\windows-gcc-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          echo "packageName=$name" >> $env:GITHUB_OUTPUT

      - name: Verify artifact
        shell: pwsh
        run: |
          $packageName = "${{ steps.package.outputs.packageName }}"
          if (Test-Path "${packageName}.zip") {
            Write-Output "Artifact ${packageName}.zip created successfully"
          } else {
            Write-Error "Artifact ${packageName}.zip not found"
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip
          retention-days: 1

  build-linux:
    name: Build Linux GCC
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - gcc_version: 13
    env:
      targetName: JX3DPS.so
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      packageName: ${{ steps.package.outputs.packageName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install GCC 13
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
          sudo update-alternatives --set gcc /usr/bin/gcc-13
          sudo update-alternatives --set g++ /usr/bin/g++-13
          gcc --version
          g++ --version

      - name: Build
        id: build
        run: |
          cmake -S . -B ./build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DVERSION_BRANCH=release
          cmake --build ./build --target install --config Release --verbose
          echo "Build completed. Checking install directory:"
          find ./build/install -type f

      - name: Check build directory
        run: |
          echo "Checking build directory structure:"
          find ./build -type d
          echo "Checking for JX3DPS.so:"
          find ./build -name JX3DPS.so

      - name: Get version from CMake
        id: get_version
        run: |
          export TZ="Asia/Shanghai"
          timestamp=$(TZ="Asia/Shanghai" git log -1 --format=%cd --date=format:%Y%m%d%H%M)
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release -DVERSION_BRANCH=release > cmake_output.txt
          version=$(sed -n 's/.*VERSION=\(.*\)/\1/p' cmake_output.txt | head -n 1)
          if [ -z "$version" ]; then
            echo "无法从 CMake 输出中提取版本号"
            exit 1
          fi
          major_minor_version=$(echo $version | cut -d. -f1,2)
          full_version="${major_minor_version}.${timestamp:4:4}.${timestamp:8:4}"
          echo "生成的版本号: $full_version"
          echo "VERSION=$full_version" >> $GITHUB_OUTPUT

      - name: Package
        id: package
        env:
          archiveName: JX3DPS-linux-${{ steps.get_version.outputs.VERSION }}
        run: |
          mkdir -p ${{ env.archiveName }}
          find ./build -name JX3DPS.so -exec cp {} ${{ env.archiveName }}/ \;
          if [ ! -f ${{ env.archiveName }}/JX3DPS.so ]; then
            echo "Error: JX3DPS.so not found"
            exit 1
          fi
          zip -r ${{ env.archiveName }}.zip ${{ env.archiveName }}
          echo "packageName=${{ env.archiveName }}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip
          retention-days: 1

  build-mac:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - qt_ver: 6.7.2
    env:
      targetName: JX3DPS.dylib
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      packageName: ${{ steps.package.outputs.packageName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          cache: 'false'

      - name: Install dependencies
        run: |
          brew update
          brew install cmake

      - name: Build
        id: build
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release
          cmake --build ./build --target install --config Release --verbose
          echo "Build completed. Checking install directory:"
          find ./build/install -type f

      - name: Get version from CMake
        id: get_version
        run: |
          export TZ="Asia/Shanghai"
          timestamp=$(TZ="Asia/Shanghai" git log -1 --format=%cd --date=format:%Y%m%d%H%M)
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release > cmake_output.txt
          version=$(sed -n 's/.*VERSION=\(.*\)/\1/p' cmake_output.txt | head -n 1)
          if [ -z "$version" ]; then
            echo "无法从 CMake 输出中提取版本号"
            exit 1
          fi
          major_minor_version=$(echo $version | cut -d. -f1,2)
          full_version="${major_minor_version}.${timestamp:4:4}.${timestamp:8:4}"
          echo "生成的版本号: $full_version"
          echo "VERSION=$full_version" >> $GITHUB_OUTPUT

      - name: Package
        id: package
        env:
          archiveName: JX3DPS-macos-${{ steps.get_version.outputs.VERSION }}
        run: |
          mkdir -p ${{ env.archiveName }}
          find ./build -name JX3DPS.dylib -exec cp {} ${{ env.archiveName }}/ \;
          if [ ! -f ${{ env.archiveName }}/JX3DPS.dylib ]; then
            echo "Error: JX3DPS.dylib not found"
            exit 1
          fi
          zip -r ${{ env.archiveName }}.zip ${{ env.archiveName }}
          echo "packageName=${{ env.archiveName }}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip
          retention-days: 1
          
  release:
    name: Generate Changelog and Release
    needs: [build-win, build-linux, build-mac]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        run: |
          set -e

          git config --local core.autocrlf input

          latest_commit=$(git rev-parse HEAD)
          latest_commit_date=$(git log -1 --format=%ad --date=short)

          generate_changelog_for_tag() {
              local current_tag=$1
              local prev_tag=$2
              local tag_date=$(git log -1 --format=%ad --date=short $current_tag)

              echo "## $current_tag ($tag_date)"
              echo

              local range
              if [ -z "$prev_tag" ]; then
                  range="$current_tag"
              else
                  range="$prev_tag..$current_tag"
              fi

              local commits=$(git log $range --pretty=format:"%at|%s|@%an|%h" --reverse --no-merges)

              if [ -z "$commits" ]; then
                  echo "No changes in this version."
                  echo
              else
                  process_commits "$commits"
              fi
          }

          process_commits() {
              local commits="$1"
              
              local -a feat_commits fix_commits docs_commits perf_commits refactor_commits test_commits other_commits

              while IFS='|' read -r timestamp message author hash; do
                  if [ -z "$message" ] || [ -z "$author" ] || [ -z "$hash" ]; then
                      continue
                  fi

                  if [[ $message =~ ^(feat|fix|docs|perf|refactor|test): ]]; then
                      type=${BASH_REMATCH[1]}
                      clean_message=${message#$type: }
                  else
                      type="other"
                      clean_message=$(echo "$message" | sed -E 's/^(ci|chore|style|build|revert):\s*//')
                  fi
                  
                  key="${timestamp}|${clean_message}|${author}|${hash}"
                  case $type in
                      feat)     feat_commits+=("$key")     ;;
                      fix)      fix_commits+=("$key")      ;;
                      docs)     docs_commits+=("$key")     ;;
                      perf)     perf_commits+=("$key")     ;;
                      refactor) refactor_commits+=("$key") ;;
                      test)     test_commits+=("$key")     ;;
                      *)        other_commits+=("$key")    ;;
                  esac
              done <<< "$commits"

              format_commits "Features" "${feat_commits[@]+"${feat_commits[@]}"}"
              format_commits "Bug Fixes" "${fix_commits[@]+"${fix_commits[@]}"}"
              format_commits "Documentation" "${docs_commits[@]+"${docs_commits[@]}"}"
              format_commits "Performance Improvements" "${perf_commits[@]+"${perf_commits[@]}"}"
              format_commits "Refactor" "${refactor_commits[@]+"${refactor_commits[@]}"}"
              format_commits "Tests" "${test_commits[@]+"${test_commits[@]}"}"
              format_commits "Others" "${other_commits[@]+"${other_commits[@]}"}"
          }

          format_commits() {
              local title=$1
              shift
              local commits=("$@")
              
              if [ ${#commits[@]} -eq 0 ]; then
                  return
              fi
              
              echo "### $title"
              
              IFS=$'\n' sorted=($(sort -n <<<"${commits[*]}"))
              unset IFS
              
              declare -A merged_commits
              
              for commit in "${sorted[@]}"; do
                  IFS='|' read -r timestamp message author hash <<< "$commit"
                  key="${message}|${author}"
                  if [[ -v merged_commits[$key] ]]; then
                      merged_commits[$key]+=" $hash"
                  else
                      merged_commits[$key]="$timestamp|$hash"
                  fi
              done
              
              IFS=$'\n' sorted_keys=($(
                  for key in "${!merged_commits[@]}"; do
                      echo "${merged_commits[$key]}|$key"
                  done | sort -n
              ))
              unset IFS
              
              for entry in "${sorted_keys[@]}"; do
                  IFS='|' read -r timestamp hashes message author <<< "$entry"
                  hashes_reversed=$(echo $hashes | tr ' ' '\n' | tac | tr '\n' ' ' | sed 's/ $//')
                  echo "- $message by $author in $hashes_reversed"
              done
              echo
          }

          {
              echo "# CHANGELOG"
              echo

              tags=($(git tag --sort=-creatordate))
              latest_tag="${tags[0]}"
              
              unreleased_commits=$(git log $latest_tag..$latest_commit --pretty=format:"%at|%s|@%an|%h" --reverse --no-merges)
              
              if [ -n "$unreleased_commits" ]; then
                  echo "## Unreleased ($latest_commit_date)"
                  echo
                  process_commits "$unreleased_commits"
              fi

              for ((i=0; i<${#tags[@]}; i++)); do
                  current_tag="${tags[i]}"
                  next_tag="${tags[i+1]}"
                  generate_changelog_for_tag "$current_tag" "$next_tag"
              done

              if [ $(wc -l < changelog.md) -le 3 ]; then
                  echo "No changes found in the repository."
              fi

          } > changelog.md

          if [ -s changelog.md ]; then
              echo "changelog_path=changelog.md" >> $GITHUB_OUTPUT
          else
              echo "Error: changelog.md is empty" >&2
              exit 1
          fi

          git config --local --unset core.autocrlf

      - name: Download Windows artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ needs.build-win.outputs.packageName }}

      - name: Download Linux artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ needs.build-linux.outputs.packageName }}

      - name: Download macOS artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ needs.build-mac.outputs.packageName }}

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.build-win.outputs.version }}"
          changelogPath="${{ steps.changelog.outputs.changelog_path }}"
          
          gh release create $version --title "$version" --notes-file $changelogPath

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.build-win.outputs.version }}"
          windows_package="${{ needs.build-win.outputs.packageName }}"
          linux_package="${{ needs.build-linux.outputs.packageName }}"
          macos_package="${{ needs.build-mac.outputs.packageName }}"
          
          if [ -f "${windows_package}.zip" ]; then
            gh release upload $version "${windows_package}.zip"
            echo "Successfully uploaded ${windows_package}.zip to release $version"
          else
            echo "Error: ${windows_package}.zip not found"
            ls -R
            exit 1
          fi

          if [ -f "${linux_package}.zip" ]; then
            gh release upload $version "${linux_package}.zip"
            echo "Successfully uploaded ${linux_package}.zip to release $version"
          else
            echo "Error: ${linux_package}.zip not found"
            ls -R
            exit 1
          fi

          if [ -f "${macos_package}.zip" ]; then
            gh release upload $version "${macos_package}.zip"
            echo "Successfully uploaded ${macos_package}.zip to release $version"
          else
            echo "Error: ${macos_package}.zip not found"
            ls -R
            exit 1
          fi