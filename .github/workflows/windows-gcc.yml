name: Windows MinGW
on: 
  push:
    paths:
      - '.github/workflows/windows-gcc.yml'
      - '3rd/*'
      - 'include/*'
      - 'src/*'
      - 'modules/*'
      - 'performance/*'
      - 'example/*'
      - 'tests/*'
      - 'cmake/*'
      - 'CMakeLists.txt'
    tags:
      - '*'
  pull_request:
    paths:
      - '.github/workflows/windows-gcc.yml'
      - '3rd/*'
      - 'include/*'
      - 'src/*'
      - 'modules/*'
      - 'performance/*'
      - 'example/*'
      - 'tests/*'
      - 'cmake/*'
      - 'CMakeLists.txt'

jobs:
  build:
    name: Build
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw
            qt_ver: 6.7.2
            gcc_version: 13.2.0
    env:
      targetName: JX3DPS.dll
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install GCC
        shell: pwsh
        run: |
          .\.github\scripts\install-gcc.ps1 -Version ${{ matrix.gcc_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'false'

      - name: Qt and MinGW environment configuration
        shell: pwsh
        run: |
          $QtBin = "${{ env.Qt6_DIR }}/bin"
          echo "$QtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        id: build
        shell: bash
        run: |
          export PATH="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:$PATH"
          cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
          cmake --build ./build --target install --config Release

      - name: Package
        id: package      
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_arch }}-gcc${{ matrix.gcc_version }}
        shell: pwsh
        run: |
          & .github\scripts\windows-gcc-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          echo "packageName=$name" >> $env:GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: JX3DPS ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          asset_content_type: application/zip