name: Build and Release

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, review_requested]
    branches:
      - master
  workflow_dispatch:

jobs:
  build-mingw:
    name: Build Windows MinGW
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw
            qt_ver: 6.7.2
            gcc_version: 13.2.0
    env:
      targetName: JX3DPS.dll
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      packageName: ${{ steps.package.outputs.packageName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install GCC
        shell: pwsh
        run: |
          .\.github\scripts\install-gcc.ps1 -Version ${{ matrix.gcc_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'false'

      - name: Qt and MinGW environment configuration
        shell: pwsh
        run: |
          $QtBin = "${{ env.Qt6_DIR }}/bin"
          echo "$QtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        id: build
        shell: bash
        run: |
          export PATH="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:$PATH"
          cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
          cmake --build ./build --target install --config Release

      - name: Get version from CMake
        id: get_version
        shell: pwsh
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release > cmake_output.txt
          $version = (Select-String -Path cmake_output.txt -Pattern "VERSION=(.+)").Matches.Groups[1].Value
          if ($version) {
            echo "Extracted version: $version"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          } else {
            echo "Failed to extract version from CMake output"
            exit 1
          }

      - name: Package
        id: package      
        env:
          archiveName: JX3DPS-win64-mingw-${{ steps.get_version.outputs.VERSION }}
        shell: pwsh
        run: |
          & .github\scripts\windows-gcc-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          echo "packageName=$name" >> $env:GITHUB_OUTPUT

      - name: Verify artifact
        shell: pwsh
        run: |
          $packageName = "${{ steps.package.outputs.packageName }}"
          if (Test-Path "${packageName}.zip") {
            Write-Output "Artifact ${packageName}.zip created successfully"
          } else {
            Write-Error "Artifact ${packageName}.zip not found"
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip
          retention-days: 1
          
  generate-changelog:
    name: Generate Changelog and Release
    needs: [build-mingw]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        run: |
          # 获取最新的标签
          latestTag=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # 定义范围
          range="${latestTag}..HEAD"
      
          # 使用 Git 命令获取提交记录，排除合并提交，包括作者信息
          commits=$(git log $range --pretty=format:"%s|@%an|%h" --reverse --no-merges)
      
          # 定义关联数组来存储合并的提交信息
          declare -A feat_commits fix_commits docs_commits perf_commits refactor_commits test_commits other_commits
      
          # 处理每个提交
          while IFS='|' read -r message author hash; do
            # 提取提交类型和清理后的消息
            if [[ $message =~ ^(feat|fix|docs|perf|refactor|test): ]]; then
              type=${BASH_REMATCH[1]}
              clean_message=${message#$type: }
            else
              type="other"
              clean_message=$message
            fi
            
            key="${clean_message}|${author}"
            case $type in
              feat)     array_ref="feat_commits"     ;;
              fix)      array_ref="fix_commits"      ;;
              docs)     array_ref="docs_commits"     ;;
              perf)     array_ref="perf_commits"     ;;
              refactor) array_ref="refactor_commits" ;;
              test)     array_ref="test_commits"     ;;
              *)        array_ref="other_commits"    ;;
            esac
            
            if [[ -v ${array_ref}[$key] ]]; then
              eval "${array_ref}[$key]+=' $hash'"
            else
              eval "${array_ref}[$key]='$hash'"
            fi
          done <<< "$commits"
      
          # 格式化提交
          format_commits() {
            local -n commit_array=$1
            local title=$2
            local formatted=""
            for key in "${!commit_array[@]}"; do
              IFS='|' read -r message author <<< "$key"
              hashes=${commit_array[$key]}
              formatted+="- $message by $author in $hashes"$'\n'
            done
            if [ -n "$formatted" ]; then
              echo "### $title"
              echo "$formatted"
            fi
          }
      
          # 构建 changelog
          {
            echo "## CHANGELOG"
            echo
            format_commits feat_commits "Features"
            format_commits fix_commits "Bug Fixes"
            format_commits docs_commits "Documentation"
            format_commits perf_commits "Performance Improvements"
            format_commits refactor_commits "Refactoring"
            format_commits test_commits "Tests"
            format_commits other_commits "Others"
          } > changelog.md
      
          echo "changelog_path=changelog.md" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-mingw.outputs.packageName }}

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.build-mingw.outputs.version }}"
          changelogPath="${{ steps.changelog.outputs.changelog_path }}"
          
          # 使用 GitHub CLI 创建发布
          gh release create $version --title "$version" --notes-file $changelogPath

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.build-mingw.outputs.version }}"
          packageName="${{ needs.build-mingw.outputs.packageName }}"
          
          # 直接上传下载的zip文件
          if [ -f "${packageName}.zip" ]; then
            gh release upload $version "${packageName}.zip"
            echo "Successfully uploaded ${packageName}.zip to release $version"
          else
            echo "Error: ${packageName}.zip not found"
            ls -R
            exit 1
          fi