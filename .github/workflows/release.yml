name: Release

on:
  workflow_run:
    workflows: ["Windows MinGW Build", "Linux GCC Build"]
    types:
      - completed
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, review_requested]
    branches:
      - master

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (github.event_name == 'pull_request' && github.base_ref == 'master')
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Check build status
        if: github.event_name == 'workflow_run' || github.event_name == 'push'
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Checking both Windows and Linux build status for push event"
            win_status=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-mingw-build.yml/runs?branch=master&event=push&status=completed" | \
              jq -r '.workflow_runs[0].conclusion')
            linux_status=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/linux-gcc-build.yml/runs?branch=master&event=push&status=completed" | \
              jq -r '.workflow_runs[0].conclusion')
            if [[ "$win_status" != "success" || "$linux_status" != "success" ]]; then
              echo "One or both builds are not successful. Skipping release."
              exit 1
            fi
          elif [[ "${{ github.event.workflow_run.name }}" == "Windows MinGW Build" ]]; then
            echo "Checking Linux GCC Build status"
            linux_status=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/linux-gcc-build.yml/runs?branch=master&event=push&status=completed" | \
              jq -r '.workflow_runs[0].conclusion')
            if [[ "$linux_status" != "success" ]]; then
              echo "Linux GCC Build is not successful. Skipping release."
              exit 1
            fi
          elif [[ "${{ github.event.workflow_run.name }}" == "Linux GCC Build" ]]; then
            echo "Checking Windows MinGW Build status"
            win_status=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-mingw-build.yml/runs?branch=master&event=push&status=completed" | \
              jq -r '.workflow_runs[0].conclusion')
            if [[ "$win_status" != "success" ]]; then
              echo "Windows MinGW Build is not successful. Skipping release."
              exit 1
            fi
          fi

      - name: Download Windows artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: JX3DPS-win64-mingw-*
          path: ./windows-artifact

      - name: Download Linux artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: JX3DPS-linux-gcc-*
          path: ./linux-artifact

      - name: Generate Changelog
        id: changelog
        run: |
          # 获取最新的标签
          latestTag=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # 定义范围
          range="${latestTag}..HEAD"
      
          # 使用 Git 命令获取提交记录，排除合并提交，包括作者信息和提交时间戳
          commits=$(git log $range --pretty=format:"%s|@%an|%h|%at" --reverse --no-merges)
      
          # 定义关联数组来存储合并的提交信息
          declare -A feat_commits fix_commits docs_commits perf_commits refactor_commits test_commits other_commits
      
          # 处理每个提交
          while IFS='|' read -r message author hash timestamp; do
            # 提取提交类型和清理后的消息
            if [[ $message =~ ^(feat|fix|docs|perf|refactor|test): ]]; then
              type=${BASH_REMATCH[1]}
              clean_message=${message#$type: }
            else
              type="other"
              # 移除常见的前缀
              clean_message=$(echo "$message" | sed -E 's/^(ci|chore|style|build|revert):\s*//')
            fi
            
            key="${clean_message}|${author}"
            case $type in
              feat)     array_ref="feat_commits"     ;;
              fix)      array_ref="fix_commits"      ;;
              docs)     array_ref="docs_commits"     ;;
              perf)     array_ref="perf_commits"     ;;
              refactor) array_ref="refactor_commits" ;;
              test)     array_ref="test_commits"     ;;
              *)        array_ref="other_commits"    ;;
            esac
            
            if [[ -v ${array_ref}[$key] ]]; then
              eval "${array_ref}[$key]+=';$hash|$timestamp'"
            else
              eval "${array_ref}[$key]='$hash|$timestamp'"
            fi
          done <<< "$commits"
      
          # 格式化提交
          format_commits() {
            local -n commit_array=$1
            local title=$2
            local formatted=""
            
            # 创建一个临时数组来存储排序后的提交
            declare -a sorted_commits
            for key in "${!commit_array[@]}"; do
              IFS='|' read -r message author <<< "$key"
              hashes_timestamps="${commit_array[$key]}"
              IFS=';' read -ra entries <<< "$hashes_timestamps"
              for entry in "${entries[@]}"; do
                IFS='|' read -r hash timestamp <<< "$entry"
                sorted_commits+=("$timestamp|$message|$author|$hash")
              done
            done
            
            # 按时间戳排序
            IFS=$'\n' sorted_commits=($(sort <<<"${sorted_commits[*]}"))
            unset IFS
            
            # 格式化排序后的提交
            local prev_message=""
            local hashes=""
            for entry in "${sorted_commits[@]}"; do
              IFS='|' read -r timestamp message author hash <<< "$entry"
              if [[ "$message" != "$prev_message" && -n "$prev_message" ]]; then
                formatted+="- $prev_message by $prev_author in $hashes"$'\n'
                hashes=""
              fi
              hashes+="$hash "
              prev_message="$message"
              prev_author="$author"
            done
            if [[ -n "$prev_message" ]]; then
              formatted+="- $prev_message by $prev_author in $hashes"$'\n'
            fi
            
            if [ -n "$formatted" ]; then
              echo "### $title"
              echo "$formatted"
            fi
          }
      
          # 构建 changelog
          {
            echo "## CHANGELOG"
            echo
            format_commits feat_commits "Features"
            format_commits fix_commits "Bug Fixes"
            format_commits docs_commits "Documentation"
            format_commits perf_commits "Performance Improvements"
            format_commits refactor_commits "Refactoring"
            format_commits test_commits "Tests"
            format_commits other_commits "Others"
          } > changelog.md
      
          echo "changelog_path=changelog.md" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(ls ./windows-artifact/JX3DPS-win64-mingw-*.zip | sed -n 's/.*JX3DPS-win64-mingw-\(.*\)\.zip/\1/p')
          changelogPath="${{ steps.changelog.outputs.changelog_path }}"
          
          # 使用 GitHub CLI 创建发布
          gh release create $version --title "$version" --notes-file $changelogPath

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(ls ./windows-artifact/JX3DPS-win64-mingw-*.zip | sed -n 's/.*JX3DPS-win64-mingw-\(.*\)\.zip/\1/p')
          
          # 上传 Windows 构建
          gh release upload $version ./windows-artifact/*.zip
          
          # 上传 Linux 构建
          gh release upload $version ./linux-artifact/*.zip
          
          echo "Successfully uploaded artifacts to release $version"