name: Windows MinGW
on: 
  push:
    branches:
      - master
    paths:
      - '.github/workflows/windows-gcc.yml'
      - '3rd/*'
      - 'include/*'
      - 'src/*'
      - 'modules/*'
      - 'performance/*'
      - 'example/*'
      - 'tests/*'
      - 'cmake/*'
      - 'CMakeLists.txt'
  pull_request:
    paths:
      - '.github/workflows/windows-gcc.yml'
      - '3rd/*'
      - 'include/*'
      - 'src/*'
      - 'modules/*'
      - 'performance/*'
      - 'example/*'
      - 'tests/*'
      - 'cmake/*'
      - 'CMakeLists.txt'

jobs:
  build:
    name: Build
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw
            qt_ver: 6.7.2
            gcc_version: 13.2.0
    env:
      targetName: JX3DPS.dll
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install GCC
        shell: pwsh
        run: |
          .\.github\scripts\install-gcc.ps1 -Version ${{ matrix.gcc_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'false'

      - name: Qt and MinGW environment configuration
        shell: pwsh
        run: |
          $QtBin = "${{ env.Qt6_DIR }}/bin"
          echo "$QtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        id: build
        shell: bash
        run: |
          export PATH="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:$PATH"
          cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
          cmake --build ./build --target install --config Release

      - name: Package
        id: package      
        env:
          archiveName: win64-gcc
        shell: pwsh
        run: |
          & .github\scripts\windows-gcc-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          echo "packageName=$name" >> $env:GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip

      - name: Get version from CMake
        if: github.ref == 'refs/heads/master'
        id: get_version
        shell: pwsh
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release > cmake_output.txt
          $version = (Select-String -Path cmake_output.txt -Pattern "VERSION=(.+)").Matches.Groups[1].Value
          if ($version) {
            echo "Extracted version: $version"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          } else {
            echo "Failed to extract version from CMake output"
            exit 1
          }

      - name: Package
        id: package      
        env:
          archiveName: JX3DPS-${{ steps.get_version.outputs.VERSION }}-win64-gcc
        shell: pwsh
        run: |
          & .github\scripts\windows-gcc-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          echo "packageName=$name" >> $env:GITHUB_OUTPUT

      - name: Generate Changelog
        if: github.ref == 'refs/heads/master'
        id: changelog
        shell: pwsh
        run: |
          # 获取最新的两个标签
          $tags = git tag --sort=-creatordate | Select-Object -First 2
          $latestTag = $tags[0]
          $previousTag = $tags[1]

          if (-not $previousTag) {
            # 如果只有一个标签，就从仓库开始到最新标签
            $range = "$latestTag"
          } else {
            $range = "$previousTag..$latestTag"
          }

          # 使用 Git 命令获取提交记录
          $commits = git log $range --pretty=format:"- %s (%h)" --reverse

          # 按类型分类提交
          $featCommits = $commits | Where-Object { $_ -match '^- feat' }
          $fixCommits = $commits | Where-Object { $_ -match '^- fix' }
          $otherCommits = $commits | Where-Object { $_ -notmatch '^- (feat|fix)' }

          # 构建 changelog
          $changelog = @"
          #### Features

          $($featCommits -join "`n")

          #### Bug Fixes

          $($fixCommits -join "`n")

          #### Other Changes

          $($otherCommits -join "`n")
          "@

          # 移除空的部分
          $changelog = $changelog -replace '(?ms)#### [^\n]+\n\n(?=#### |$)', ''

          $changelog = $changelog.Trim()
          $changelog = $changelog -replace '%', '%25'
          $changelog = $changelog -replace "`n", '%0A'
          $changelog = $changelog -replace "`r", '%0D'
          echo "changelog<<EOF" >> $env:GITHUB_OUTPUT
          echo "$changelog" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      # ... [其他步骤保持不变] ...

      - name: Create Release
        if: github.ref == 'refs/heads/master'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: JX3DPS ${{ steps.get_version.outputs.VERSION }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          asset_content_type: application/zip