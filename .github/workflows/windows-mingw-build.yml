name: Windows MinGW Build

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  build-mingw:
    name: Build Windows MinGW
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw
            qt_ver: 6.7.2
            gcc_version: 13.2.0
    env:
      targetName: JX3DPS.dll
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      packageName: ${{ steps.package.outputs.packageName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install GCC
        shell: pwsh
        run: |
          .\.github\scripts\install-gcc.ps1 -Version ${{ matrix.gcc_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'false'

      - name: Qt and MinGW environment configuration
        shell: pwsh
        run: |
          $QtBin = "${{ env.Qt6_DIR }}/bin"
          echo "$QtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        id: build
        shell: bash
        run: |
          export PATH="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:$PATH"
          cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DVERSION_BRANCH=release
          cmake --build ./build --target install --config Release

      - name: Get version from CMake
        id: get_version
        shell: bash
        run: |
          export TZ="Asia/Shanghai"
          timestamp=$(TZ="Asia/Shanghai" git log -1 --format=%cd --date=format:%Y%m%d%H%M)
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release -DVERSION_BRANCH=release > cmake_output.txt
          version=$(sed -n 's/.*VERSION=\(.*\)/\1/p' cmake_output.txt | head -n 1)
          if [ -z "$version" ]; then
            echo "无法从 CMake 输出中提取版本号"
            exit 1
          fi
          major_minor_version=$(echo $version | cut -d. -f1,2)
          full_version="${major_minor_version}.${timestamp:4:4}.${timestamp:8:4}"
          echo "生成的版本号: $full_version"
          echo "VERSION=$full_version" >> $GITHUB_OUTPUT

      - name: Package
        id: package      
        env:
          archiveName: JX3DPS-win64-mingw-${{ steps.get_version.outputs.VERSION }}
        shell: pwsh
        run: |
          & .github\scripts\windows-gcc-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          echo "packageName=$name" >> $env:GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip
          retention-days: 1