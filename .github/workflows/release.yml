name: Release

on:
  workflow_run:
    workflows: ["Windows MinGW Build", "Linux GCC Build"]
    types:
      - completed
    branches:
      - master

jobs:
  check-builds:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Wait for builds to complete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in {1..30}; do
            win_status=$(gh run list --workflow "Windows MinGW Build" --branch master --limit 1 --json conclusion -q '.[0].conclusion')
            linux_status=$(gh run list --workflow "Linux GCC Build" --branch master --limit 1 --json conclusion -q '.[0].conclusion')
            
            if [[ "$win_status" != "null" && "$linux_status" != "null" ]]; then
              echo "Both builds have completed."
              break
            fi
            
            echo "Waiting for builds to complete... (Attempt $i)"
            sleep 60
          done

      - name: Check build statuses
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          win_status=$(gh run list --workflow "Windows MinGW Build" --branch master --limit 1 --json conclusion -q '.[0].conclusion')
          linux_status=$(gh run list --workflow "Linux GCC Build" --branch master --limit 1 --json conclusion -q '.[0].conclusion')
          
          echo "Windows build status: $win_status"
          echo "Linux build status: $linux_status"
          
          if [[ "$win_status" == "success" && "$linux_status" == "success" ]]; then
            echo "Both Windows and Linux builds are successful."
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Not all builds are successful. Skipping release."
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-builds
    if: needs.check-builds.outputs.should_release == 'true'
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Debug Workflow Run Info
        run: |
          echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow Name: ${{ github.event.workflow_run.name }}"
          echo "Workflow Conclusion: ${{ github.event.workflow_run.conclusion }}"

      - name: List Available Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifacts=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts)
          echo "Available artifacts:"
          echo "$artifacts" | jq -r '.artifacts[] | "\(.name) (\(.id))"'

      - name: Download Windows artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifact_id=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts \
            | jq -r '.artifacts[] | select(.name | startswith("JX3DPS-win64-mingw-")) | .id')
          if [ -n "$artifact_id" ]; then
            gh run download $artifact_id --dir ./windows-artifact
          else
            echo "Error: Could not find Windows artifact"
            exit 1
          fi

      - name: Download Linux artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifact_id=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts \
            | jq -r '.artifacts[] | select(.name | startswith("JX3DPS-linux-gcc-")) | .id')
          if [ -n "$artifact_id" ]; then
            gh run download $artifact_id --dir ./linux-artifact
          else
            echo "Error: Could not find Linux artifact"
            exit 1
          fi

      - name: List Windows artifacts
        run: |
          echo "Contents of windows-artifact directory:"
          ls -R ./windows-artifact

      - name: List Linux artifacts
        run: |
          echo "Contents of linux-artifact directory:"
          ls -R ./linux-artifact

      - name: Generate Changelog
        id: changelog
        run: |
          # 获取最新的标签
          latestTag=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # 定义范围
          range="${latestTag}..HEAD"
      
          # 使用 Git 命令获取提交记录，排除合并提交，包括作者信息和提交时间戳
          commits=$(git log $range --pretty=format:"%s|@%an|%h|%at" --reverse --no-merges)
      
          # 定义关联数组来存储合并的提交信息
          declare -A feat_commits fix_commits docs_commits perf_commits refactor_commits test_commits other_commits
      
          # 处理每个提交
          while IFS='|' read -r message author hash timestamp; do
            # 提取提交类型和清理后的消息
            if [[ $message =~ ^(feat|fix|docs|perf|refactor|test): ]]; then
              type=${BASH_REMATCH[1]}
              clean_message=${message#$type: }
            else
              type="other"
              # 移除常见的前缀
              clean_message=$(echo "$message" | sed -E 's/^(ci|chore|style|build|revert):\s*//')
            fi
            
            key="${clean_message}|${author}"
            case $type in
              feat)     array_ref="feat_commits"     ;;
              fix)      array_ref="fix_commits"      ;;
              docs)     array_ref="docs_commits"     ;;
              perf)     array_ref="perf_commits"     ;;
              refactor) array_ref="refactor_commits" ;;
              test)     array_ref="test_commits"     ;;
              *)        array_ref="other_commits"    ;;
            esac
            
            if [[ -v ${array_ref}[$key] ]]; then
              eval "${array_ref}[$key]+=';$hash|$timestamp'"
            else
              eval "${array_ref}[$key]='$hash|$timestamp'"
            fi
          done <<< "$commits"
      
          # 格式化提交
          format_commits() {
            local -n commit_array=$1
            local title=$2
            local formatted=""
            
            # 创建一个临时数组来存储排序后的提交
            declare -a sorted_commits
            for key in "${!commit_array[@]}"; do
              IFS='|' read -r message author <<< "$key"
              hashes_timestamps="${commit_array[$key]}"
              IFS=';' read -ra entries <<< "$hashes_timestamps"
              for entry in "${entries[@]}"; do
                IFS='|' read -r hash timestamp <<< "$entry"
                sorted_commits+=("$timestamp|$message|$author|$hash")
              done
            done
            
            # 按时间戳排序
            IFS=$'\n' sorted_commits=($(sort <<<"${sorted_commits[*]}"))
            unset IFS
            
            # 格式化排序后的提交
            local prev_message=""
            local hashes=""
            for entry in "${sorted_commits[@]}"; do
              IFS='|' read -r timestamp message author hash <<< "$entry"
              if [[ "$message" != "$prev_message" && -n "$prev_message" ]]; then
                formatted+="- $prev_message by $prev_author in $hashes"$'\n'
                hashes=""
              fi
              hashes+="$hash "
              prev_message="$message"
              prev_author="$author"
            done
            if [[ -n "$prev_message" ]]; then
              formatted+="- $prev_message by $prev_author in $hashes"$'\n'
            fi
            
            if [ -n "$formatted" ]; then
              echo "### $title"
              echo "$formatted"
            fi
          }
      
          # 构建 changelog
          {
            echo "## CHANGELOG"
            echo
            format_commits feat_commits "Features"
            format_commits fix_commits "Bug Fixes"
            format_commits docs_commits "Documentation"
            format_commits perf_commits "Performance Improvements"
            format_commits refactor_commits "Refactoring"
            format_commits test_commits "Tests"
            format_commits other_commits "Others"
          } > changelog.md
      
          echo "changelog_path=changelog.md" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(ls ./windows-artifact/JX3DPS-win64-mingw-*.zip | sed -n 's/.*JX3DPS-win64-mingw-\(.*\)\.zip/\1/p' | head -n 1)
          if [ -z "$version" ]; then
            echo "Error: Could not find Windows artifact version"
            exit 1
          fi
          changelogPath="${{ steps.changelog.outputs.changelog_path }}"
          
          # 使用 GitHub CLI 创建发布
          gh release create $version --title "$version" --notes-file $changelogPath

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(ls ./windows-artifact/JX3DPS-win64-mingw-*.zip | sed -n 's/.*JX3DPS-win64-mingw-\(.*\)\.zip/\1/p' | head -n 1)
          if [ -z "$version" ]; then
            echo "Error: Could not find Windows artifact version"
            exit 1
          fi
          
          # 上传 Windows 构建
          gh release upload $version ./windows-artifact/*.zip
          
          # 上传 Linux 构建
          gh release upload $version ./linux-artifact/*.zip
          
          echo "Successfully uploaded artifacts to release $version"