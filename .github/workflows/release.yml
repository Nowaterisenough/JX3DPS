name: Build and Release

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/release.yml'
      - '3rd/*'
      - 'include/*'
      - 'src/*'
      - 'modules/*'
      - 'performance/*'
      - 'example/*'
      - 'tests/*'
      - 'cmake/*'
      - 'CMakeLists.txt'
  pull_request:
    paths:
      - '.github/workflows/release.yml'
      - '3rd/*'
      - 'include/*'
      - 'src/*'
      - 'modules/*'
      - 'performance/*'
      - 'example/*'
      - 'tests/*'
      - 'cmake/*'
      - 'CMakeLists.txt'

jobs:
  build-mingw:
    name: Build Windows MinGW
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw
            qt_ver: 6.7.2
            gcc_version: 13.2.0
    env:
      targetName: JX3DPS.dll
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install GCC
        shell: pwsh
        run: |
          .\.github\scripts\install-gcc.ps1 -Version ${{ matrix.gcc_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'false'

      - name: Qt and MinGW environment configuration
        shell: pwsh
        run: |
          $QtBin = "${{ env.Qt6_DIR }}/bin"
          echo "$QtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        id: build
        shell: bash
        run: |
          export PATH="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:$PATH"
          cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
          cmake --build ./build --target install --config Release

      - name: Get version from CMake
        if: github.ref == 'refs/heads/master'
        id: get_version
        shell: pwsh
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release > cmake_output.txt
          $version = (Select-String -Path cmake_output.txt -Pattern "VERSION=(.+)").Matches.Groups[1].Value
          if ($version) {
            echo "Extracted version: $version"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          } else {
            echo "Failed to extract version from CMake output"
            exit 1
          }

      - name: Package
        id: package      
        env:
          archiveName: JX3DPS-win64-mingw-${{ steps.get_version.outputs.VERSION }}
        shell: pwsh
        run: |
          & .github\scripts\windows-gcc-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          echo "packageName=$name" >> $env:GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip

  build-linux:
    name: Build Linux GCC
    runs-on: ubuntu-latest
    env:
      targetName: libJX3DPS.so
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          cache: 'false'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev

      - name: Build
        id: build
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release
          cmake --build ./build --target install --config Release

      - name: Get version from CMake
        if: github.ref == 'refs/heads/master'
        id: get_version
        run: |
          version=$(grep -oP 'project\(JX3DPS VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
          echo "VERSION=$version" >> $GITHUB_OUTPUT

      - name: Package
        id: package      
        env:
          archiveName: JX3DPS-linux-gcc-${{ steps.get_version.outputs.VERSION }}
        run: |
          mkdir -p ${{ env.archiveName }}
          cp ./build/install/lib/${{ env.targetName }} ${{ env.archiveName }}/
          zip -r ${{ env.archiveName }}.zip ${{ env.archiveName }}
          echo "packageName=${{ env.archiveName }}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip

  generate-changelog:
    name: Generate Changelog
    needs: [build-mingw, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        run: |
          # 获取最新的两个标签
          tags=$(git tag --sort=-creatordate | head -n 2)
          latestTag=$(echo "$tags" | head -n 1)
          previousTag=$(echo "$tags" | tail -n 1)

          if [ -z "$previousTag" ]; then
            # 如果只有一个标签，就从仓库开始到最新标签
            range="$latestTag"
          else
            range="$previousTag..$latestTag"
          fi

          # 使用 Git 命令获取提交记录
          commits=$(git log $range --pretty=format:"- %s (%h)" --reverse)

          # 按类型分类提交并移除类型前缀
          featCommits=$(echo "$commits" | grep '^- feat' | sed 's/^- feat: \?/- /')
          fixCommits=$(echo "$commits" | grep '^- fix' | sed 's/^- fix: \?/- /')
          otherCommits=$(echo "$commits" | grep -v '^- \(feat\|fix\)' | sed 's/^- [^:]*: \?/- /')

          # 构建 changelog
          {
            if [ -n "$featCommits" ]; then
              echo "#### Features"
              echo "$featCommits"
              echo
            fi
            
            if [ -n "$fixCommits" ]; then
              echo "#### BugFixes"
              echo "$fixCommits"
              echo
            fi
            
            if [ -n "$otherCommits" ]; then
              echo "#### Others"
              echo "$otherCommits"
              echo
            fi
          } > changelog.md

          echo "changelog_path=changelog.md" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(grep -oP 'project\(JX3DPS VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
          changelogPath="${{ steps.changelog.outputs.changelog_path }}"
          
          # 使用 GitHub CLI 创建发布
          gh release create $version --title "Release $version" --notes-file $changelogPath

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(grep -oP 'project\(JX3DPS VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
          
          # 下载并上传 MinGW 构建的资产
          gh run download -n JX3DPS-win64-mingw-$version
          gh release upload $version JX3DPS-win64-mingw-$version.zip
          
          # 下载并上传 MSVC 构建的资产
          gh run download -n JX3DPS-win64-msvc-$version
          gh release upload $version JX3DPS-win64-msvc-$version.zip
          
          # 下载并上传 Linux 构建的资产
          gh run download -n JX3DPS-linux-gcc-$version
          gh release upload $version JX3DPS-linux-gcc-$version.zip